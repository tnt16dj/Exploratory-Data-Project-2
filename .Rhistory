getmean = getmean)
}
userVect <- makeVector(1:4)
userVect$setmean()
userVect$get()
mean(userVect$get())
userVect$setmean(mean(userVect$get()))
userVect$getmean()
userVect$list()
help(list)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m}
userVect <- makeVector(1:4)
userVect$get()
rm(list=ls(all=TRUE))
gc(reset=TRUE)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
userVect <- makeVector(1:4)
userVect$get()
rm(list=ls(all=TRUE))
gc(reset=TRUE)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
vect<-c(1,3,5,7)
userVect <- makeVector(vect)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(userVect)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:4)
makeVector$set(1:4)
unclass(makeVector)
x <- 1:5
unclass(x)
help(type)
typeof(x)
help(unclass)
class(x)
x <- list(c(1,"Todd", 3))
class(x)
unclass(x)
class(x)
x
rm(list=ls(all=TRUE))
gc(reset=TRUE)
x <- list(a = 1, b = 2, c = "three")
x
rm(list=ls(all=TRUE))
gc(reset=TRUE)
help(<<-)
help(solve)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/R_Docs/ProgrammingAssignment2/cachematrix.R')
help(matrix)
userMatrix <- matrix(rep(1,2), nrow = 2, ncol = 2)
userMatrix
help(rep)
userMatrix <- matrix(rep(1:2,2),nrow=2,ncol=2)
userMatrix
t <- makeCacheMatrix(userMatrix)
t
t$get()
cacheSolve(t)
t$getInverse()
solve(t$get())
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/R_Docs/ProgrammingAssignment2/cachematrix.R')
userMatrix <- matrix(c(1,2,2,1),nrow=2,ncol=2)
userMatrix
t <- makeCacheMatrix(userMatrix)
t
t$get()
solve(t$get())
makeCacheMatrix(t)
cacheSolve(t)
cacheSolve(t)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/R_Docs/ProgrammingAssignment2/cachematrix.R')
userInverse <- matrix(c(2,4,4,2), nrow=2, ncol=2)
t <- makeCacheMatrix(userInverse)
cacheSolve(t)
cacheSolve(t)
u <- cacheSolve
u
u(t)
makeCacheMatrix$get()
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/R_Docs/ProgrammingAssignment2/cachematrix.R')
userMatrix <- makeCacheMatrix(matrix(c(1,2,2,1),nrow=2,ncol=2)
userMatrix <- makeCacheMatrix(matrix(c(1,2,2,1),nrow=2,ncol=2))
userMatrix$get()
cacheSolve(userMatrix)
cacheSolve(userMatrix)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/R_Docs/ProgrammingAssignment2/cachematrix.R')
uMatrix <- makeCacheMatrix(matrix(c(1,2,2,1),nrow=2,ncol=2))
cacheSolve(uMatrix)
cacheSolve(uMatrix)
identical(uMatrix,uMatrix$get())
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/R_Docs/ProgrammingAssignment2/cachematrix.R')
uMatrix <- makeCacheMatrix(matrix(c(2,4,4,2),nrow=2,ncol=2))
solveCache(uMatrix)
cacheSolve(uMatrix)
cacheSolve(uMatrix)
uMatrix <- makeCacheMatrix(c(1,2,2,1),nrow=2,ncol=2)
uMatrix <- makeCacheMatrix(matrix(c(1,2,2,1),nrow=2,ncol=2))
cacheSolve(uMatrix)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/.active-rstudio-document')
uMatrix <- makeCacheMatrix(matrix(c(1,2,2,1),nrow=2,ncol=2))
cacheSolve(uMatrix)
cacheSolve(uMatrix)
uMatrix <- makeCacheMatrix(matrix(c(2,4,4,2),nrow=2,ncol=2))
cacheSolve(uMatrix)
cacheSolve(uMatrix)
uMatrix <- makeCacheMatrix(matrix(c(1,3,3,1),nrow=2,ncol=2))
cacheSolve(uMatrix)
cacheSolve(uMatrix)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/R_Docs/ProgrammingAssignment2/cachematrix.R')
uMatrix <- makeCacheMatrix(matrix(c(2,4,4,2),nrow=2,ncol=2))
cacheSolve(uMatrix)
cacheSolve(uMatrix)
uMatrix <- makeCacheMatrix(matrix(c(1,3,3,1),nrow=2,ncol=2))
cacheSolve(uMatrix)
cacheSolve(uMatrix)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
Todd <- makePerson()
Todd <- makePerson(Todd)
Todd $setAge(30)
Todd$getAge()
Todd$setAge(30)
Todd$getAge()
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/.active-rstudio-document')
Todd <- makePerson(Todd)
Todd <- makePerson("Todd")
Todd$setAge(30)
Todd$setHeight(5.5)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/.active-rstudio-document')
todd <- makePerson("Todd")
todd$setAge(30)
todd$setHeight(5.5)
todd$getAGe
todd$getAge
todd$getAge()
todd$setAge()
todd$getHeight()
rm(list=ls(all=TRUE))
gc(reset=TRUE)
source('~/.active-rstudio-document')
makePerson("Todd")
makePerson$setAge(30)
todd <- makePerson("Todd Tkach")
todd$setAge(30)
todd$setHeight(5.5)
todd$whoAmI
todd$whoAmI()
todd$getAge()
todd$getHeight()
rm(list=ls(all=TRUE))
gc(reset=TRUE)
library(datasets)
datasets
list(datasets)
library(datasets)
data(iris)
?iris
lapply(iris,mean)
help(apply)
apply(iris[, 1:4], 2, mean)
data(mtcars)
head(mtcars)
help(mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
help(split)
debug(ls)
ls
ls
ls
debug(ls)
ls
help(ls)
kj
ls
quit
quit
escape
exit
ls
mtcars
library(mtcars)
library(datasets)
data(mtcars)
help(ls)
ls
ls(mtcars)
debug(ls)
ls(mtcars)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
rm(list=ls(all=TRUE))
gc(reset=TRUE)
library(datasets)
data(mtcars)
head(mtcars)
help(subset)
fourCyl <- subset(mtcars, cyl == 4, select = hp)
four
fourCyl
mean(fourCyl)
mean(fourCyl[,1])
help(abs)
eightCyl <- subset(mtcars,cyl==8,select = hp)
abs(mean(fourCyl[,1])-mean(eightCyl[,1]))
library(datasets)
data(iris)
head(iris)
sapply(split(iris$Sepal.Length, iris$Species), mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
fourCyl <- subset(mtcars, cyl == 4, select = hp)
eightCyl <- subset(mtcars,cyl==8,select = hp)
abs(mean(fourCyl[,1])-mean(eightCyl[,1]))
help(runif)
library(datasets)
data(mtcars)
colSums(mtcars)
colMeans(mtcars)
rm(list=ls(all=TRUE))
gc(reset=TRUE)
data.frame(1:10,2,2)
dataTest <- 1:20
not4 <- dataTest[!$]
not4 <- dataTest[!4]
not4
dataTest[not4]
not4 <- dataTest(dataTest[,1] != 4)
not4[-c(4)]
dataTest[not4]
dataTest[-c(4)]
not4 <- subset(dataTest, dataTest[,1] != 4)
dataTest[,]
typeof(dataTest)
str(dataTest)
not4 <- subset(dataTest, dataTest != 4)
dataTest[not4]
not468 <- subset(dataTest, dataTest != 4 & dataTest != 6 & dataTest != 8)
dataTest[not468]
library(swirl)
swirl()
1
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z, 555, z)
z * 2 +100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
C(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 +1000
my_div
1:20
pi:10
15:!
15:1
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2))
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
vect <- 1:5
repVect <- seq_along(vect)
repVect
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
past(my_char,collapse=" ")
paste(my_char,collapse=" ")
my_name <- c(my_char,"Todd")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(c(1,2,3),c("X","Y","Z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0 ]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(matrix)
class(my_vectoro)
class(my_vector)
my_matrix <- my_vector
?matri
?matrix
my_matrix(1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(vector,my_matrix)
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
install.packages("rJava")
library("xlsx")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "94f89735933597bb7082d52eec69739ca723756f")
myapp <- oauth_app("github", "75d31737db6c396d805b")
getwd()
source('~/.active-rstudio-document')
table(tidyData)
library(tidyr)
tidyData <- gather(tidyData,feature_measurement,-c(Subject,Activity))
tidyData <- gather(tidyData,feature_measurement,-c("Subject","Activity"))
tidyData <- gather(tidyData,feature_measurement,mean_value,-c("Subject","Activity"))
tidyData <- gather(tidyData,feature_measurement,mean_value,-c(Subject,Activity))
tidyData
head(tidyData,30)
names(tidyData)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
?splom
?print.trellis
?par
?trellis.par.set
library(datasets)
data(airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
setwd("~/R_Docs/ExploratoryDataAnalysisProject2/Scripts_and_Plots/Exploratory-Data-Project-2")
source('~/R_Docs/ExploratoryDataAnalysisProject2/Scripts_and_Plots/Exploratory-Data-Project-2/plot6.r')
